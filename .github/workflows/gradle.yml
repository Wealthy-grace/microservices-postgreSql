name: CI/CD Pipeline for UserService

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  actions: read

env:
  REGISTRY: docker.io
  IMAGE_NAME: godfrey10/user-service
  JAVA_VERSION: 17
  GRADLE_VERSION: 8.5

jobs:
  # -----------------------------
  # 1. Build and Test
  # -----------------------------
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Server123@
          POSTGRES_DB: userService
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d userService"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: gradle

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew test --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/userService
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: Server123@
          SPRING_RABBITMQ_HOST: localhost
          SPRING_RABBITMQ_PORT: 5672
          SPRING_RABBITMQ_USERNAME: guest
          SPRING_RABBITMQ_PASSWORD: guest

      - name: Build JAR
        run: ./gradlew bootJar -x test --no-daemon

      - name: Upload JAR artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/*.jar
          retention-days: 1

  # -----------------------------
  # 2. Docker Build & Push
  # -----------------------------
  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    timeout-minutes: 12

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download JAR artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: godfrey10
          password: godfreygrace10

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=commit-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=UserService
            org.opencontainers.image.description=Spring Boot User Microservice
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

  # -----------------------------
  # 3. Deploy Staging
  # -----------------------------
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    timeout-minutes: 8

    steps:
      - name: Deploy Staging
        run: |
          docker pull docker.io/${{ env.IMAGE_NAME }}:latest

          docker stop userservice-staging 2>/dev/null || true
          docker rm userservice-staging 2>/dev/null || true

          docker run -d --name userservice-staging \
            -p 8083:8083 \
            -e SPRING_PROFILES_ACTIVE=staging \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5433/userService \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=Server123@ \
            -e SPRING_RABBITMQ_HOST=host.docker.internal \
            -e SPRING_RABBITMQ_PORT=5673 \
            -e SPRING_RABBITMQ_USERNAME=guest \
            -e SPRING_RABBITMQ_PASSWORD=guest \
            docker.io/${{ env.IMAGE_NAME }}:latest

  # -----------------------------
  # 4. Deploy Production
  # -----------------------------
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 10

    steps:
      - name: Deploy Production
        run: |
          docker pull docker.io/${{ env.IMAGE_NAME }}:latest

          docker stop userservice 2>/dev/null || true
          docker rm userservice 2>/dev/null || true

          docker run -d --name userservice \
            -p 80:8083 \
            -e SPRING_PROFILES_ACTIVE=production \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5433/userService \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=Server123@ \
            -e SPRING_RABBITMQ_HOST=host.docker.internal \
            -e SPRING_RABBITMQ_PORT=5673 \
            -e SPRING_RABBITMQ_USERNAME=guest \
            -e SPRING_RABBITMQ_PASSWORD=guest \
            docker.io/${{ env.IMAGE_NAME }}:latest

  # -----------------------------
  # 5. Cleanup
  # -----------------------------
  cleanup:
    runs-on: ubuntu-latest
    needs: [ build-and-test, build-docker, deploy-staging, deploy-production ]
    if: always()
    steps:
      - name: Cleanup Docker
        run: |
          docker system prune -af || true
          docker volume prune -f || true
          rm -rf build/ || true

  # -----------------------------
  # 6. Notifications
  # -----------------------------
  notify:
    runs-on: ubuntu-latest
    needs: [ deploy-staging, deploy-production, cleanup ]
    if: always()
    steps:
      - name: Notify Deployment
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "üéâ Production deployment successful!"
          elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "üöÄ Staging deployment successful!"
          else
            echo "‚ö†Ô∏è Deployment failed!"
          fi
