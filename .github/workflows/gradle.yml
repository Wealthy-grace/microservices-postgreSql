name: CI/CD Pipeline - User Service

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write

env:
  DOCKER_IMAGE_NAME: user-service
  DOCKER_REGISTRY: docker.io
  SPRING_PROFILES_ACTIVE: test

jobs:
  # ================================
  # Job 1: Code Quality & Testing
  # ================================
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: userService_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Server123@
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/userService_test
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: Server123@
          SPRING_RABBITMQ_HOST: localhost
          SPRING_RABBITMQ_PORT: 5672
          SPRING_RABBITMQ_USERNAME: guest
          SPRING_RABBITMQ_PASSWORD: guest

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: build/test-results/test/*.xml
          check_name: "Gradle Test Results"
          comment_title: "Unit Test Results"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/test-results/

  # ================================
  # Job 2: Build Application
  # ================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Build application
        run: ./gradlew clean build -x test

      - name: Generate version
        id: version
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            VERSION=$(date +%Y%m%d)-${GITHUB_SHA::8}
          else
            VERSION=${GITHUB_REF_NAME}-$(date +%Y%m%d)-${GITHUB_SHA::8}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/*.jar

  # ================================
  # Job 3: Security Scanning
  # ================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

  # ================================
  # Job 4: Build & Push Docker Image
  # ================================
  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, security]
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') &&
      github.repository_owner == github.actor

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Only validate credentials if they exist (for forks and external contributors)
      - name: Check Docker credentials availability
        id: docker-creds
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "has-creds=true" >> $GITHUB_OUTPUT
            echo "Docker credentials are available"
          else
            echo "has-creds=false" >> $GITHUB_OUTPUT
            echo "Docker credentials not available - skipping Docker operations"
          fi

      - name: Log in to Docker Hub
        if: steps.docker-creds.outputs.has-creds == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        if: steps.docker-creds.outputs.has-creds == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.build.outputs.version }}

      - name: Build and push Docker image
        if: steps.docker-creds.outputs.has-creds == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Build locally if no credentials (for testing/validation)
      - name: Build Docker image locally
        if: steps.docker-creds.outputs.has-creds == 'false'
        id: build-local
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ env.DOCKER_IMAGE_NAME }}:test-${{ needs.build.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Verify local image build
        if: steps.docker-creds.outputs.has-creds == 'false'
        run: |
          echo "Verifying local image was built successfully..."
          docker images | grep ${{ env.DOCKER_IMAGE_NAME }} || echo "Image not found in docker images"
          docker inspect ${{ env.DOCKER_IMAGE_NAME }}:test-${{ needs.build.outputs.version }} || echo "Image inspection failed"

      - name: Run Trivy scanner on Docker image (pushed)
        if: steps.docker-creds.outputs.has-creds == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.version }}
          format: 'sarif'
          output: 'docker-trivy-results.sarif'
          skip-update: true

      - name: Run Trivy scanner on local image
        if: steps.docker-creds.outputs.has-creds == 'false'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE_NAME }}:test-${{ needs.build.outputs.version }}
          format: 'sarif'
          output: 'docker-trivy-results.sarif'
          skip-update: true

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('docker-trivy-results.sarif') != ''
        with:
          sarif_file: 'docker-trivy-results.sarif'

  # ================================
  # Job 5: Deploy to Development
  # ================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/develop' && github.repository_owner == github.actor
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment readiness
        run: |
          echo "Checking deployment readiness..."
          if [ ! -f "docker-compose.yml" ]; then
            echo "Warning: docker-compose.yml not found. Creating a basic one for demo."
            cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            user-service:
              image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_USERNAME:-demo}/${DOCKER_IMAGE_NAME:-user-service}:${IMAGE_TAG:-latest}
              ports:
                - "8083:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-development}
                - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB:-userService_dev}
                - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER:-postgres}
                - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD:-Server123@}
              depends_on:
                - postgres
                - rabbitmq
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
                interval: 30s
                timeout: 10s
                retries: 3
          
            postgres:
              image: postgres:15
              environment:
                - POSTGRES_DB=${POSTGRES_DB:-userService_dev}
                - POSTGRES_USER=${POSTGRES_USER:-postgres}
                - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-Server123@}
              ports:
                - "5432:5432"
              volumes:
                - postgres_data:/var/lib/postgresql/data
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
                interval: 10s
                timeout: 5s
                retries: 5
          
            rabbitmq:
              image: rabbitmq:3-management
              environment:
                - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-guest}
                - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-guest}
              ports:
                - "5672:5672"
                - "15672:15672"
              healthcheck:
                test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
                interval: 30s
                timeout: 10s
                retries: 5
          
          volumes:
            postgres_data:
          EOF
          fi

      - name: Deploy using Docker Compose
        run: |
          echo "Deploying to Development Environment"
          
          # Create environment file
          cat > .env << EOF
          DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME || 'demo' }}
          DOCKER_IMAGE_NAME=${{ env.DOCKER_IMAGE_NAME }}
          IMAGE_TAG=${{ needs.build.outputs.version }}
          SPRING_PROFILES_ACTIVE=development
          POSTGRES_DB=userService_dev
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=Server123@
          RABBITMQ_DEFAULT_USER=guest
          RABBITMQ_DEFAULT_PASS=guest
          EOF
          
          echo "Environment configuration:"
          cat .env
          
          # Start infrastructure first
          echo "Starting infrastructure services..."
          docker-compose up -d postgres rabbitmq
          
          # Wait for infrastructure
          echo "Waiting for infrastructure to be ready..."
          sleep 45
          
          # Check if we have docker credentials to deploy the app
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "Deploying application service..."
            docker-compose up -d user-service
          
            # Wait for application
            echo "Waiting for application to be ready..."
            sleep 30
          
            # Health check with retry
            echo "Performing health check..."
            for i in {1..10}; do
              if curl -f http://localhost:8083/actuator/health 2>/dev/null; then
                echo "✅ Health check passed on attempt $i"
                break
              elif [ $i -eq 10 ]; then
                echo "❌ Health check failed after $i attempts"
                echo "Service logs:"
                docker-compose logs user-service
                exit 1
              else
                echo "⏳ Health check failed, attempt $i/10, retrying in 15s..."
                sleep 15
              fi
            done
          else
            echo "⚠️  Docker credentials not available, skipping application deployment"
            echo "Infrastructure services (postgres, rabbitmq) are running for testing"
          fi

      - name: Deployment summary
        run: |
          echo "=== Deployment Summary ==="
          echo "Environment: Development"
          echo "Version: ${{ needs.build.outputs.version }}"
          echo "Services status:"
          docker-compose ps

  # ================================
  # Job 6: Deploy to Production
  # ================================
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main' && github.repository_owner == github.actor
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate production secrets
        run: |
          echo "Validating production deployment requirements..."
          MISSING_SECRETS=""
          
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS DOCKER_USERNAME"
          fi
          if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS DOCKER_PASSWORD"
          fi
          if [ -z "${{ secrets.PROD_DB_PASSWORD }}" ]; then
            echo "Warning: PROD_DB_PASSWORD not set, using default"
          fi
          if [ -z "${{ secrets.PROD_RABBITMQ_USER }}" ]; then
            echo "Warning: PROD_RABBITMQ_USER not set, using default"
          fi
          if [ -z "${{ secrets.PROD_RABBITMQ_PASSWORD }}" ]; then
            echo "Warning: PROD_RABBITMQ_PASSWORD not set, using default"
          fi
          
          if [ -n "$MISSING_SECRETS" ]; then
            echo "❌ Missing required secrets for production deployment:$MISSING_SECRETS"
            echo "Please configure these secrets in your repository settings."
            exit 1
          fi
          
          echo "✅ Production deployment validation passed"

      - name: Create production compose override
        run: |
          # Create production-specific docker-compose override if it doesn't exist
          if [ ! -f "docker-compose.prod.yml" ]; then
            echo "Creating production docker-compose override..."
            cat > docker-compose.prod.yml << 'EOF'
          version: '3.8'
          services:
            user-service:
              deploy:
                replicas: 2
                resources:
                  limits:
                    cpus: '1.0'
                    memory: 1G
                  reservations:
                    cpus: '0.5'
                    memory: 512M
              healthcheck:
                interval: 15s
                timeout: 5s
                retries: 3
                start_period: 40s
          
            postgres:
              deploy:
                resources:
                  limits:
                    cpus: '0.5'
                    memory: 512M
              volumes:
                - postgres_prod_data:/var/lib/postgresql/data
          
            rabbitmq:
              deploy:
                resources:
                  limits:
                    cpus: '0.25'
                    memory: 256M
          
          volumes:
            postgres_prod_data:
          EOF
          fi

      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to Production Environment"
          
          # Create production environment file
          cat > .env.prod << EOF
          DOCKER_REGISTRY=${{ env.DOCKER_REGISTRY }}
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          DOCKER_IMAGE_NAME=${{ env.DOCKER_IMAGE_NAME }}
          IMAGE_TAG=${{ needs.build.outputs.version }}
          SPRING_PROFILES_ACTIVE=production
          POSTGRES_DB=userService_prod
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD || 'Server123@' }}
          RABBITMQ_DEFAULT_USER=${{ secrets.PROD_RABBITMQ_USER || 'guest' }}
          RABBITMQ_DEFAULT_PASS=${{ secrets.PROD_RABBITMQ_PASSWORD || 'guest' }}
          EOF
          
          # Deploy with production configuration
          docker-compose --env-file .env.prod -f docker-compose.yml -f docker-compose.prod.yml up -d
          
          # Wait for services
          echo "⏳ Waiting for services to be ready..."
          sleep 60
          
          # Health check with retry
          echo "🔍 Performing production health checks..."
          for i in {1..10}; do
            if curl -f http://localhost:8083/actuator/health 2>/dev/null; then
              echo "✅ Production health check passed on attempt $i"
              break
            elif [ $i -eq 10 ]; then
              echo "❌ Production health check failed after $i attempts"
              echo "Service logs:"
              docker-compose --env-file .env.prod logs user-service
              exit 1
            else
              echo "⏳ Health check failed, attempt $i/10, retrying in 20s..."
              sleep 20
            fi
          done
          
          echo "🎉 Production deployment completed successfully!"

  # ================================
  # Job 7: Integration Tests
  # ================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: github.ref == 'refs/heads/develop' && github.repository_owner == github.actor

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Wait for services to be fully ready
        run: |
          echo "⏳ Waiting for all services to be fully initialized..."
          sleep 30

      - name: Run integration tests
        run: |
          echo "🧪 Running integration tests against development environment"
          
          # Basic API connectivity tests
          echo "Testing API connectivity..."
          
          # Health check
          echo "1. Health check test..."
          if curl -f http://localhost:8083/actuator/health 2>/dev/null; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            # Try to get more info
            echo "Attempting to diagnose the issue..."
            curl -v http://localhost:8083/actuator/health || echo "Connection failed"
            exit 1
          fi
          
          # Info endpoint
          echo "2. Info endpoint test..."
          if curl -f http://localhost:8083/actuator/info 2>/dev/null; then
            echo "✅ Info endpoint accessible"
          else
            echo "⚠️  Info endpoint not accessible (may not be enabled)"
          fi
          
          # Database connectivity (if applicable)
          echo "3. Database connectivity test..."
          # This would typically be done through your application's endpoints
          # For now, we'll just verify postgres is running
          if curl -f http://localhost:8083/actuator/health 2>/dev/null | grep -q "UP"; then
            echo "✅ Application health indicates database connectivity"
          else
            echo "❌ Application health check indicates issues"
            exit 1
          fi
          
          echo "🎉 All integration tests completed successfully!"

      - name: Generate integration test report
        run: |
          echo "=== Integration Test Report ===" > integration-test-report.txt
          echo "Date: $(date)" >> integration-test-report.txt
          echo "Environment: Development" >> integration-test-report.txt
          echo "Version: ${{ needs.build.outputs.version }}" >> integration-test-report.txt
          echo "Status: PASSED" >> integration-test-report.txt
          echo "Tests executed:" >> integration-test-report.txt
          echo "- Health check: PASSED" >> integration-test-report.txt
          echo "- Info endpoint: CHECKED" >> integration-test-report.txt
          echo "- Database connectivity: PASSED" >> integration-test-report.txt
          
          cat integration-test-report.txt

      - name: Upload integration test report
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-report
          path: integration-test-report.txt

  # ================================
  # Job 8: Cleanup
  # ================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod, integration-tests]
    if: always()

    steps:
      - name: Clean up resources
        run: |
          echo "🧹 Performing cleanup tasks"
          
          # Clean up Docker resources
          echo "Cleaning up Docker resources..."
          docker system prune -f --volumes || echo "Docker cleanup completed with warnings"
          
          # Clean up any temporary files
          echo "Cleaning up temporary files..."
          rm -f .env .env.prod integration-test-report.txt || true
          
          echo "✅ Cleanup completed successfully"

      - name: Cleanup summary
        run: |
          echo "=== Cleanup Summary ==="
          echo "- Docker system pruned"
          echo "- Temporary files removed"
          echo "- Pipeline cleanup completed"