name: CI/CD Pipeline - User Service

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  security-events: write

env:
  DOCKER_IMAGE_NAME: user-service
  DOCKER_REGISTRY: docker.io
  SPRING_PROFILES_ACTIVE: test

jobs:
  # ================================
  # Job 1: Code Quality & Testing
  # ================================
  test:
    name: Test & Code Quality
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: userService_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Server123@
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/userService_test
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: Server123@
          SPRING_RABBITMQ_HOST: localhost
          SPRING_RABBITMQ_PORT: 5672
          SPRING_RABBITMQ_USERNAME: guest
          SPRING_RABBITMQ_PASSWORD: guest

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: build/test-results/test/*.xml
          check_name: "Gradle Test Results"
          comment_title: "Unit Test Results"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: build/test-results/

  # ================================
  # Job 2: Build Application
  # ================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Build application
        run: ./gradlew clean build -x test

      - name: Generate version
        id: version
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            VERSION=$(date +%Y%m%d)-${GITHUB_SHA::8}
          else
            VERSION=${GITHUB_REF_NAME}-$(date +%Y%m%d)-${GITHUB_SHA::8}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/*.jar

  # ================================
  # Job 3: Security Scanning
  # ================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: 'trivy-results.sarif'

  # ================================
  # Job 4: Build & Push Docker Image
  # ================================
  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-artifacts
          path: build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Docker credentials
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "Error: DOCKER_USERNAME secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "Error: DOCKER_PASSWORD secret is not set"
            exit 1
          fi
          echo "Docker credentials validation passed"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: godfrey10
          password: godfreygrace10
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.build.outputs.version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.build.outputs.version }}
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('docker-trivy-results.sarif') != ''
        with:
          sarif_file: 'docker-trivy-results.sarif'

  # ================================
  # Job 5: Deploy to Development
  # ================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy using Docker Compose
        run: |
          echo "Deploying to Development Environment"
          
          # Create environment file
          cat > .env << EOF
          IMAGE_TAG=${{ needs.build.outputs.version }}
          SPRING_PROFILES_ACTIVE=development
          POSTGRES_DB=userService_dev
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=Server123@
          RABBITMQ_DEFAULT_USER=guest
          RABBITMQ_DEFAULT_PASS=guest
          EOF
          
          # Deploy services
          docker-compose -f docker-compose.yml up -d
          
          # Wait for services to be ready
          echo "Waiting for services to be ready..."
          sleep 30
          
          # Health check
          curl -f http://localhost:8083/actuator/health || exit 1

  # ================================
  # Job 6: Deploy to Production
  # ================================
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "Deploying to Production Environment"
          
          # Create production environment file
          cat > .env.prod << EOF
          IMAGE_TAG=${{ needs.build.outputs.version }}
          SPRING_PROFILES_ACTIVE=production
          POSTGRES_DB=userService_prod
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          RABBITMQ_DEFAULT_USER=${{ secrets.PROD_RABBITMQ_USER }}
          RABBITMQ_DEFAULT_PASS=${{ secrets.PROD_RABBITMQ_PASSWORD }}
          EOF
          
          # Deploy with production configuration
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          
          # Wait for services
          echo "Waiting for services to be ready..."
          sleep 45
          
          # Health check with retry
          for i in {1..5}; do
            if curl -f http://localhost:8083/actuator/health; then
              echo "Health check passed"
              break
            else
              echo "Health check failed, attempt $i/5"
              sleep 10
            fi
          done

  # ================================
  # Job 7: Integration Tests
  # ================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run integration tests
        run: |
          echo "Running integration tests against development environment"
          # Add your integration test commands here
          # ./gradlew integrationTest
          
          # Example API health check
          curl -f http://localhost:8083/actuator/health
          echo "Integration tests completed successfully"

  # ================================
  # Job 8: Cleanup
  # ================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod, integration-tests]
    if: always()

    steps:
      - name: Clean up artifacts
        run: |
          echo "Performing cleanup tasks"
          # Add cleanup commands if needed
          docker system prune -f